*lambda-vimrc.txt*  lambda的个人vim配置工具包
*lvimrc*
                                                                             ~
 _                 _         _                  _                    ~
| | __ _ _ __ ___ | |__   __| | __ _     __   _(_)_ __ ___  _ __ ___  ~
| |/ _` | '_ ` _ \| '_ \ / _` |/ _` |____\ \ / / | '_ ` _ \| '__/ __|~
| | (_| | | | | | | |_) | (_| | (_| |_____\ V /| | | | | | | | | (__ ~
|_|\__,_|_| |_| |_|_.__/ \__,_|\__,_|      \_/ |_|_| |_| |_|_|  \___|~
                                                                     
==============================================================================
CONTENTS                                                      *lvimrc-contents*

   01. Intro ................................................ |lvimrc-intro|
   02. Mapping ............................................ |lvimrc-mapping|
   03. Plugin .............................................. |lvimrc-plugin|
   04. Commands .......................................... |lvimrc-commands|
   04. Configuration ................................ |lvimrc-configuration|
   05. Contributions ................................ |lvimrc-contributions|
   06. License ............................................ |lvimrc-license|

==============================================================================
INTRODUCTION                                                     *lvimrc-intro*

本配置集合主要是为了方便个人工作生活而实现的, 因此键位设置带有强烈的个人风格

    主要功能如下: 
        1. 对一些常用的set进行了设定
        2. 提供了一些常用功能的映射
        3. 提供了方便的全局文本搜索功能
        4. 提供了全局特定标记替换功能
        5. 对c++语言实现了代码自动生成, 括号补全, 快速注释, 编译, 运行的功能
        6. 集成了多个插件
            1.*Vundle* 插件管理器
            2.*NERDTree* 目录树浏览器
            3.*tagbar* 源代码标签浏览器
            4.*vim-airline* 轻量级状态条工具
            5.*molokai* 配色方案
            6.*asyncrun* 异步命令运行工具
            7.*fugitive* Git管理工具
            8.*dash* Dash集成工具(only for macos)


==============================================================================
MAPPING                                                       *lvimrc-mapping*

*  tiny core written with extensibility in mind.
*  integrates with many popular plugins.
*  looks good with regular fonts, and provides configuration points so you
   can use unicode or powerline symbols.
*  optimized for speed; it loads in under a millisecond.
*  fully customizable; if you know a little 'statusline' syntax you can
   tweak it to your needs.
*  extremely easy to write themes.

==============================================================================
PLUGIN                                                         *lvimrc-plugin*

Where did the name come from?

I wrote this on an airplane, and since it's light as air it turned out to be a
good name :-)

==============================================================================
COMMANDS                                                     *lvimrc-commands*

:lvimrcTheme {theme-name}                                   *:lvimrcTheme*
  Displays or changes the current theme.

:lvimrcToggleWhitespace                          *:lvimrcToggleWhitespace*
  Toggles whitespace detection.

:lvimrcToggle                                              *:lvimrcToggle*
  Toggles between the standard 'statusline' and lvimrc.

:lvimrcRefresh                                            *:lvimrcRefresh*
  Refreshes all highlight groups and redraws the statusline.

==============================================================================
CONFIGURATION                                           *lvimrc-configuration*

There are a couple configuration values available (shown with their default
values):

* the separator used on the left side >
  let g:lvimrc_left_sep='>'
<
* the separator used on the right side >
  let g:lvimrc_right_sep='<'
<
* enable modified detection >
  let g:lvimrc_detect_modified=1

* enable paste detection >
  let g:lvimrc_detect_paste=1
<
* enable crypt detection >
  let g:lvimrc_detect_crypt=1

* enable spell detection >
  let g:lvimrc_detect_spell=1
<
* enable iminsert detection >
  let g:lvimrc_detect_iminsert=0
<
* determine whether inactive windows should have the left section collapsed to
  only the filename of that buffer.  >
  let g:lvimrc_inactive_collapse=1
<
* themes are automatically selected based on the matching colorscheme. this
  can be overridden by defining a value. >
  let g:lvimrc_theme='dark'
<
  Note: Only the dark theme is distributed with vim-lvimrc. For more themes,
  checkout the vim-lvimrc-themes repository
  (github.com/vim-lvimrc/vim-lvimrc-themes)

* if you want to patch the lvimrc theme before it gets applied, you can
  supply the name of a function where you can modify the palette. >
  let g:lvimrc_theme_patch_func = 'lvimrcThemePatch'
  function! lvimrcThemePatch(palette)
    if g:lvimrc_theme == 'badwolf'
      for colors in values(a:palette.inactive)
        let colors[3] = 245
      endfor
    endif
  endfunction
<
* By default, lvimrc will use unicode symbols if your encoding matches
  utf-8. If you want the powerline symbols set this variable: >
  let g:lvimrc_powerline_fonts = 1
<
  If you want to use plain ascii symbols, set this variable: >
  let g:lvimrc_symbols_ascii = 1
<
* define the set of text to display for each mode.  >
  let g:lvimrc_mode_map = {} " see source for the defaults

  " or copy paste the following into your vimrc for shortform text
  let g:lvimrc_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
<
* define the set of filename match queries which excludes a window from having
  its statusline modified >
  let g:lvimrc_exclude_filenames = [] " see source for current list
<
* define the set of filetypes which are excluded from having its window
  statusline modified >
  let g:lvimrc_exclude_filetypes = [] " see source for current list
<
* defines whether the preview window should be excluded from have its window
  statusline modified (may help with plugins which use the preview window
  heavily) >
  let g:lvimrc_exclude_preview = 0
<
* disable the lvimrc customization for selective windows (this is a
  window-local variable so you can disable it for only some windows) >
  let w:lvimrc_disabled = 1

* Do not draw separators for empty sections (only for the active window) >
  let g:lvimrc_skip_empty_sections = 1
<
  This variable can be overriden by setting a window-local variable with
  the same name (in the correct window): >
  let w:lvimrc_skip_empty_sections = 0
<
==============================================================================
CONTRIBUTIONS                                             *lvimrc-contributions*

欢迎所有的人的pull request

==============================================================================
LICENSE                                                         *lvimrc-license*

MIT License.  Copyright © 2016-2017 Wang Zhuowei 

vim:tw=78:ts=8:ft=help:norl:
