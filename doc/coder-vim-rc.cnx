*coder-vimrc.cnx* A powerful vim configuration for programmers        *cvimrc*

                        _                     _~
           ___ ___   __| | ___ _ __    __   _(_)_ __ ___  _ __ ___~
          / __/ _ \ / _` |/ _ | '______\ \ / | | '_ ` _ \| '__/ __|~
         | (_| (_) | (_| |  __| | |_____\ V /| | | | | | | | | (__~
          \___\___/ \__,_|\___|_|        \_/ |_|_| |_| |_|_|  \___|~

                              Reference Manual~

==============================================================================
内容                                                    *coder-vimrc-content*

    1. 介绍........................................ |coder-vimrc-intro|
    2. 配置........................................ |coder-vimrc-config|
    3. 选项........................................ |coder-vimrc-options|
    4. 命令........................................ |coder-vimrc-commands|
    5. 按键绑定.................................... |coder-vimrc-mappings|
    6. 插件........................................ |coder-vimrc-plugins|
    7. 依赖........................................ |coder-vimrc-requirements|

==============================================================================
介绍                                                     *coder-vimrc-intro*

一个专门为编码而生的vimrc配置包(后简称|cvimrc|)。其中包含了对vim本身的配置
|options| , 如缩进, 格式, 编码, 背景, 涵盖了基本设置的方方面面; 还有一些便
于编码使用的特殊键位映射以及命令, 如全局搜索(全面支持Vim的正则表达式
|regexp|), 格式化代码; 最为重要的是本身集成了大量功能强大的插件, 只需要对
插件有一定的了解便可以极大的增强编码效率。

支持终端和图形界面模式, 对于功能不齐备的Vi及Vim, 请安装基础配置。(详情参考
|coder-vimrc-config|)

==============================================================================
配置                                                     *coder-vimrc-config*

------------------------------------------------------------------------------
安装:~

第一步, 首先将|cvimrc|从github上拉取到任意一个目录, 假设为~/vimrcs:
    git clone --recursive https://github.com/Chinazwking/vimrc ~/vimrcs

第二步, 进入~/vimrcs目录, 执行脚本(以下两种命令根据情况选择一个):
    ./install.sh -b  # 安装basic版, 适用于终端的vi和不支持复杂功能的vim
    ./install.sh -a  # 安装advanced版, 完整的命令, 映射, 插件支持
    执行命令后会在~目录生成.vimrc文件, 已存在的.vimrc文件会被重命名为
    .vimrc-coder.bak。

第三步, 如果安装的是basic版, 那么安装已经结束; 如果安装的是advanced版, 那么
还要进行额外的插件配置, 进入vi后输入如下命令: >
    :PluginInstall
<
命令执行结束后, 所有插件均已安装完毕。后续的对插件的维护操作, 请参考说明
|vundle|。

注意: Windows下安装可以使用git的bash模式, 此模式可以执行bash脚本, 所以不再
针对Windows系统编写安装脚本。

------------------------------------------------------------------------------
更新:~

更新|cvimrc|只需要在|cvimrc|的克隆目录输入命令即可:
    git pull

------------------------------------------------------------------------------
卸载:~

卸载和安装同理, 在|cvimrc|目录输入命令:
    ./uninstall.sh

------------------------------------------------------------------------------
.vimrc结构:~

    " 作者注释信息

    " |coder-vimrc-options|里的cvimrc选项:
    let g:cvimrc_custom_plugin = "~/.myplugin.vim"
    ...
    " |coder-vimrc-mappings|里的高级映射一栏的部分重定义:
    map nr <Plug>ReloadNerd
    ...

    " <===基础配置===:
    ...
    source xx/xx/basic.vim
    " :===基础配置===>

    " <===高级配置===:
    ...
    source xx/xx/advanced.vim
    " :===高级配置===>

    " |coder-vimrc-options|里的插件选项:
    let g:tagbar_ctags_bin = '~/ctags'
    ...
    " 用户自定义配置, 命令, 函数, ...:
    set nonu
    map a b
    ...

==============================================================================
选项                                                    *coder-vimrc-options*

选项共由两部分组成。第一部分是|cvimrc|本身的选项, 另一部分是集成的插件所支
持的扩展选项。对于basic版来说, 插件的扩展选项是无效的。如果想要修改这些
选项, 请在~/.vimrc文件上进行扩展。

------------------------------------------------------------------------------
cvimrc选项:~

注意: 以下的这几个cvimrc选项请放置在您的.vimrc文件的开始位置(在基础配置
之前即可)。详情参考|coder-vimrc-config|结构。

                                           *'g:loaded_cvimrc_basic_mapping'*
默认值: 无
使用该选项来屏蔽所有|cvimrc|的基本|mapping|: >
    let g:loaded_cvimrc_basic_mapping = 1
<
                                        *'g:loaded_cvimrc_advanced_mapping'*
默认值: 无
使用该选项来屏蔽所有|cvimrc|的高级|mapping|: >
    let g:loaded_cvimrc_advanced_mapping = 1
<
                                                  *'g:cvimrc_custom_plugin'*
默认值: 无
使用该选项来加载存放用户自定义的|Plugin|集合的文件路径: >
    let g:cvimrc_custom_plugin = '~/my_plugin_list.vim'
<
    my_plugin_list.vim中的内容应该使用|vundle|的标准插件语法: >
        Plugin 'xxx/yyy'
        Plugin 'aaa/bbb'
<
------------------------------------------------------------------------------
插件选项:~

由于插件选项较多, 因此只选择几个比较重要的选项进行说明, 如果想要进行更加
深入全面的配置, 请参考|coder-vimrc-plugins|。

注意: 以下的插件选项请放到您的.vimrc文件的末尾(落后于高级配置即可)。详情
参考|coder-vimrc-config|结构。

                                                        |g:tagbar_ctags_bin|
此选项用来定位ctags可执行文件的位置, 默认搜索$PATH路径, 如果您的ctags不
位于其中, 请手动指明ctags可执行文件位置: >
    let g:tagbar_ctags_bin = 'C:\Ctags5.8\ctags.exe'
<
                                                             |g:ale_linters|
此选项用来指明默认开启的进行lint检测的语言选项, 默认开启对cpp和py的检测,
如果想要扩展请重定义或者追加此列表, 每增加一门新的检测语言, 请自行配置需
要的linter路径。对于支持的语言以及linter, 请参考|ale-support|: >
    let g:ale_linters = {
        \'cpp': ['cpplint'],
        \'python': ['pylint'],
        \}
<
                                              |g:ale_cpp_cpplint_executable|
此选项用于定位cpplint.py的位置, 默认搜索$PATH路径, 如果不存在其中, 请手动
指明cpplint的位置: >
    let g:ale_cpp_cpplint_executable = '~/myconfig/cpplint.py'
<
                                                 |g:ale_cpp_cpplint_options|
此选项用于设置cpplint检测代码时的选项, 请根据个人情况对其参数进行设置, 默
认为: >
    let g:ale_cpp_cpplint_options = '--verbose=5'
<
                                            |g:ale_python_pylint_executable|
此选项用于定位pylint的位置, 默认搜索$PATH路径, 如果不存在其中, 请手动指明
pylint的位置: >
    let g:ale_python_pylint_executable = '~/myconfig/pylint'
<
                                               |g:ale_python_pylint_options|
此选项用于设置pylint检测代码时的选项, 请根据个人情况对其参数进行设置, 默认
为: >
    let g:ale_python_pylint_options = '--rcfile  ~/.pylintrc'
<
==============================================================================
命令                                                   *coder-vimrc-commands*

命令和选项类似。第一部分是|cvimrc|本身的命令, 另一部分是集成的插件所支持的
命令。对于basic版来说, 插件的命令是无效的。如果想要拓展或是重定义这些命令,
请在~/.vimrc文件上进行扩展。

------------------------------------------------------------------------------
cvimrc命令:~

                                                                      *:Cwd*
:Cwd
    将当前工作目录切换为当前|buffers|所在目录

    例如用`:pwd`命令显示当前目录是~/a_dir, 而当前buffer目录为~/cur_buf, 那
    么当输入`:Cwd`时, 将会将当前工作目录设置为~/cur_buf。

                                                                   *:Search*
:Search {pattern}
    在当前工作目录下的所有子目录及其子文件中搜索所有符合pattern的文本, 并
    将结果重定向到|location-list|中(可以使用<F3>快速打开, 关闭)。

    pattern支持Vim的|regexp|, 按<TAB>会出现自动补全, 默认补全选项顺序为:
        1. 当前光标所在位置的字符串(|<cword>|里的内容)
        2. 上一次搜索命令的内容(寄存器@/: |quote/|里的内容)
        3. 粘贴板里的内容(寄存器@*: |gui-clipboard|里的内容)

    以下命令返回当前工作目录下所有后缀为cpp的文件: >
        :Search \v.*\.cpp
<
                                                                  *:GeneTag*
:GeneTag [dir]
    在目录[dir]里调用ctags(|Exuberant_ctags|)命令, 并将生成的tags文件缓存
    到|cvimrc|的缓存目录。如果没有指明目录或者输入的目录无效, 则默认生成
    当前目录里的tags文件。如果想要开启代码跳转功能, 请在之前调用此命令
    生成tags。

    如果您的工作项目在../project/src, 请输入如下命令来启用代码跳转: >
        :GeneTag ../project/src
<
------------------------------------------------------------------------------
插件命令:~

这里只列出几个常用的命令, 如果想要深入了解请参考|coder-vimrc-plugins|。

                                                            `:PluginInstall`
:PluginInstall [plugin-name]
    安装插件到当前的Vim中, 如果不指定[plugin-name], 将会自动读取|cvimrc|里
    设置好的插件列表进行安装(推荐), 如果指定[plugin-name], 可以临时性的将
    此插件安装到Vim之中。

                                                             `:PluginUpdate`
:PluginUpdate[!]
    更新在Vundle插件配置列表的所有插件。

                                                              `:PluginClean`
:PluginClean[!]
    删除已安装但是不在Vundle插件配置列表里的插件。

                                                                 `:NERDTree`
:NERDTree [<start-directory> | <bookmark>]
    如无参数, 则默认打开当前工作目录的目录树, 否则打开指定目录或者书签。

                                                                 `:AsyncRun`
:AsyncRun[!] [options] {cmd} ...
    一个非常强大的命令, 利用Vim8里提供的异步功能执行外部命令(取代`:!`),
    关于这个命令的具体用法请参考|async.txt|。

    通常执行`:!`命令会阻塞编辑器直到返回结果, 通过这个命令可以避免掉这个问
    题, 下面这个命令可以在拉取更新的同时不阻塞你在编辑器上操作: >
        :AsyncRun git pull
<
==============================================================================
映射                                                   *coder-vimrc-mappings*

键位映射可以说是|cvimrc|里最重要的功能, 他承担了90%日常编写代码的操作, 因此
对于插件里的映射, |cvimrc|对常用的都进行了转换, 设置为了更适用于coder的操作
方式的映射。出于扩展的原因, 除了部分基础映射(如map jk <ESC>等), 对高级映射
都暴露了接口, 因此如果想要自行扩展请参考下面的文档。

------------------------------------------------------------------------------
基本映射:~

这里列出的映射无法修改, 只能通过选项|g:loaded_cvimrc_basic_mapping|来进行彻底
屏蔽。以下的<n-v>记号代表|Normal|, |Visual-mode|下可用, 其他类似记号同理

jk                = |<esc>| " 输入模式下jk含义同退出|Insert-mode|   | <i>mode
|/|                 = /\v   " 正向搜索设置为very magic模式|\v|      | <n-v>mode
|?|                 = ?\v   " 逆向搜索设置为very magic模式|\v|      | <n-v>mode
|<Left>|  = `:bprevious`      " 前往前一个|buffers|                   | <n>mode
|<Right>| = `:bnext`          " 前往下一个|buffers|                   | <n>mode
|<Up>|    = `:cprevious`      " 前往|location-list|上一条的位置       | <n>mode
|<Down>|  = `:cnext`          " 前往|location-list|下一条的位置       | <n>mode

|mapleader|         = ','   " |<Leader>|的替换值
|maplocalleader|    = '\'   " |<LocalLeader>|的替换值
|<Leader>|ev                " 快速打开~/.vimrc文件进行编辑        | <n>mode
|<Leader>|sv                " 快速加载~/.vimrc文件使配置生效      | <n>mode
|<leader>|nh                " 消除当前所有的搜索高亮'hlsearch'    | <n>mode
|<Leader>|he                " 以|hex-editing|打开文本进行编辑       | <n>mode
|<Leader>|hr                " 从|hex-editing|退出为正常模式         | <n>mode
|<Leader>|/                 " 快速搜素在寄存器@*中的内容          | <n>mode
|<Leader>||<Leader>|          " 窗口命令的缩写|CTRL-W|                | <n>mode

------------------------------------------------------------------------------
高级映射:~

高级映射指一些较为强大或者依赖于插件的功能。对于这部分提供了两种重定义的方式:
    1. 使用|'g:loaded_cvimrc_advanced_mapping'|屏蔽全部默认映射
    2. 重新定义部分高级映射对应的快捷键

注意: 无论那种形式, 必须在高级映射加载之前设置好值, 当您编辑.vimrc文件时,
请务必确认在正确的位置设置了对应的值, 具体请参考|coder-vimrc-config|结构。

                                                           <Plug>ReloadNerd
重新加载|NerdTree|目录到当前buffer所在目录
    默认映射: |<Leader>|nr
    模式: |Normal|

                                                       <Plug>DeleteAllCache
删除所有|cvimrc|运行时产生的缓存
    默认映射: |<Leader>|dc
    模式: |Normal|

                                                      <Plug>FormatTotalFile
格式化当前文件, 比如删除结尾空格, 去除^M记号等等
    默认映射: |<Leader>|ft
    模式: |Normal|

                                                    <Plug>CleanUnusedBuffer
清空除了当前buffer和|NERDTree|buffer以外的所有buffer
    默认映射: |<Leader>|bc
    模式: |Normal|

                                                         <Plug>IndentGuides
打开|关闭代码缩进开关
    默认映射: |<Leader>|ig
    模式: |Normal|

                                                      <Plug>VimgrepOperator
在当前工作目录下搜索光标下的字符或虚拟模式选中字符
    默认映射: |<Leader>|g
    模式: |Normal|, |Visual-mode|

                                                         <Plug>ShowNerdTree
打开|关闭|NerdTree|目录树
    默认映射: |<F2>|
    模式: |Normal|

                                                           <Plug>ShowTagBar
打开|关闭|tagbar|代码结构
    默认映射: |<F3>|
    模式: |Normal|

                                                         <Plug>ShowQuickFix
打开|关闭|location-list|
    默认映射: |<F4>|
    模式: |Normal|

==============================================================================
插件                                                    *coder-vimrc-plugins*

|cvimrc|主要的功能都由各个插件来承担, 因此下文将会简单的描述以下各个插件的
作用, 如果想要更加深入的配置各个插件, 请参考各个插件的文档并在.vimrc文件
的合适的位置里进行配置。

                                                                    |vundle|
最重要的插件, 因此被内置为了本项目的子模块。主要功能为Vim的包管理器, 负责
安装, 更新, 卸载其余插件。以下列出部分常用命令: >
    :PluginInstall # 安装插件
    :PluginUpdate  # 更新插件
    :PluginClean   # 清理无效插件
    :PluginList    # 列出所有插件
    :PluginSearch  # 搜索插件
<
                                                                  |surround|
一个用来处理对象两边包围对像, 比如说"", '', (), <a></a>等等, 通过这个插件
你可以快速对修改, 删除, 插入这些包围对象。下面简单举例描述其部分用法:
    原始数据(*代表光标位置)     按键序列    结果            解释
    "1234*56"                   ds"         123456          del surround
    "12*3456"                   cs"<p>      <p>123456</p>   change sur..
    *123456                     ysw}        {123456}        motion sur..
    1*23456                     viwS>       <123456>        insert sur..

                                                                    repeat
简单描述就是使得|.|可以对用户自定义的映射生效, 用法即在你定义的映射函数里加
如下语句: >
    silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)
<
                                                                  |fugitive|
一个方便的Vim内置Git仓库管理器, 可以在Vim内部方便的完成代码的提交, 比较,
拉去等所有Git支持的操作, 其中大部分操作都可以在`:Gstatus`内的视窗内非常方便
的完成, 以下为几个常用命令: >
    :Gstatus
    :Gpull
    :Gpush
<
                                                                  |NERDTree|
一个目录树浏览器, 支持对目录树中的各种元素做备份, 移动, 拷贝等操作, 额外
支持书签管理功能。常用用法就是用<F2>来打开|关闭目录树。在目录树中的操作请
在目录树界面输入?来查看。

                                                             |NERDCommenter|
一个帮助你在不同的文件格式里进行各种形式的灵活注释的插件。比如将本行注释,
行尾注释, 取消注释, 切换注释模式(比如对于c++而言, // 或者 /**/)。一般用法
如下:
    原始代码(# *代表光标位置)   按键序列    结果            解释
    def foo(): *                ,c          # def foo():    注释本行
    foo = 1*                    ,cA         foo = 1 #       行尾注释
    def foo()*: #               ,cu         def foo():      取消注释

                                                                  |asyncrun|
一个用来发挥Vim8.0异步能力的外部命令调用插件, 使得很多耗时从而阻塞Vim编辑
器的命令异步执行, 用法和原生的|:!|一致, 并且多了很多不错的可配置性功能, 简单
用法如下: >
    :AsyncRun git pull
<
                                                                 |solarized|
一款个人认为非常美型的配色方案, 简单明了, 让土土的Vim编辑器瞬间华丽起来,
配色直接采用默认设置, 一般能用到的可配置项就是这个了: >
    :set background=dark    # or
    :set background=light
<
                                                                   |airline|
一款轻量级的Vim状态条显示器, 能够以非常优雅的形式显示一些代码编辑时需要
的好多状态, 比如行, 列, 编码格式, 编辑模式, 字数统计等等。并且额外支持很
多其他插件, 用以显示各个插件特有的状态。

                                                                    |tagbar|
一个源代码结构浏览器, 使用ctags生成的tags进行结构展示, ctags支持的语言都
可以浏览其代码结构, 并可以跳转到指定定义所在位置。具体用法即键入<F4>打开
源代码结构浏览器, 然后键入?查看具体操作。

                                                       rainbow-parentheses
一个让各种括号变得五彩缤纷的插件, 可以更加方便的确认括号之间的配对关系,
默认括号包括(), [], {}。

                                                                       |ale|
顾名思义, 异步Lint引擎。又一个基于Vim8.0特性实现的静态代码分析工具, 可以
帮助你检查代码之中潜在的一些问题, 包括语法错误, 编码风格推荐等等, 支持非
常多的语言。每种语言的检测引擎一般都是外部可执行程序|脚本, 所以想要其生效
必须自己进行额外的配置。这里简单说一下开启关闭检测的方式: >
    :ALEToggle
<
==============================================================================
依赖                                               *coder-vimrc-requirements*

vim:tw=78:ts=4:ft=help:norl:
