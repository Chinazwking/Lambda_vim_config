*coder-vimrc.cnx* A powerful vim configuration for programmers        *cvimrc*

                        _                     _~
           ___ ___   __| | ___ _ __    __   _(_)_ __ ___  _ __ ___~
          / __/ _ \ / _` |/ _ | '______\ \ / | | '_ ` _ \| '__/ __|~
         | (_| (_) | (_| |  __| | |_____\ V /| | | | | | | | | (__~
          \___\___/ \__,_|\___|_|        \_/ |_|_| |_| |_|_|  \___|~

                              Reference Manual~

==============================================================================
内容                                                    *coder-vimrc-content*

    1. 介绍........................................ |coder-vimrc-intro|
    2. 配置........................................ |coder-vimrc-config|
    3. 选项........................................ |coder-vimrc-options|
    4. 命令........................................ |coder-vimrc-commands|
    5. 按键绑定.................................... |coder-vimrc-mappings|
    6. 插件........................................ |coder-vimrc-plugins|
    7. 依赖........................................ |coder-vimrc-requirements|

==============================================================================
介绍                                                     *coder-vimrc-intro*

一个专门为编码而生的vimrc配置包(后简称|cvimrc|)。其中包含了对vim本身的配置
|options| , 如缩进, 格式, 编码, 背景, 涵盖了基本设置的方方面面; 还有一些便
于编码使用的特殊键位映射以及命令, 如全局搜索(全面支持Vim的正则表达式
|regexp|), 格式化代码; 最为重要的是本身集成了大量功能强大的插件, 只需要对
插件有一定的了解便可以极大的增强编码效率。

支持终端和图形界面模式, 对于功能不齐备的Vi及Vim, 请安装基础配置。(详情参考
|coder-vimrc-config|)

==============================================================================
配置                                                     *coder-vimrc-config*

------------------------------------------------------------------------------
安装:~

第一步, 首先将|cvimrc|从github上拉取到任意一个目录, 假设为~/vimrcs:
    git clone --recursive https://github.com/Chinazwking/vimrc ~/vimrcs

第二步, 进入~/vimrcs目录, 执行脚本(以下两种命令根据情况选择一个):
    ./install.sh -b  # 安装basic版, 适用于终端的vi和不支持复杂功能的vim
    ./install.sh -a  # 安装advanced版, 完整的命令, 映射, 插件支持
    执行命令后会在~目录生成.vimrc文件, 已存在的.vimrc文件会被重命名为
    .vimrc-coder.bak。

第三步, 如果安装的是basic版, 那么安装已经结束; 如果安装的是advanced版, 那么
还要进行额外的插件配置, 进入vi后输入如下命令: >
    :PluginInstall
<
命令执行结束后, 所有插件均已安装完毕。后续的对插件的维护操作, 请参考说明
|vundle|。

注意: Windows下安装可以使用git的bash模式, 此模式可以执行bash脚本, 所以不在
针对Windows系统编写安装脚本。

------------------------------------------------------------------------------
更新:~

更新|cvimrc|只需要在|cvimrc|的克隆目录输入命令即可:
    git pull

------------------------------------------------------------------------------
卸载:~

卸载和安装同理, 在|cvimrc|目录输入命令:
    ./uninstall.sh

==============================================================================
选项                                                    *coder-vimrc-options*

选项共由两部分组成。第一部分是|cvimrc|本身的选项, 另一部分是集成的插件所支
持的扩展选项。对于basic版来说, 插件的扩展选项是无效的。如果想要修改这些
选项, 请在~/.vimrc文件上进行扩展。

------------------------------------------------------------------------------
cvimrc选项:~

                                           *'g:loaded_cvimrc_basic_mapping'*
使用该选项来屏蔽所有|cvimrc|所有基本的|mapping|: >
    let g:loaded_cvimrc_basic_mapping = 1
<
                                                  *'g:cvimrc_custom_plugin'*
使用该选项来加载存放用户自定义的|Plugin|集合的文件路径: >
    let g:cvimrc_custom_plugin = '~/my_plugin_list.vim'
<
    my_plugin_list.vim中的内容应该使用|vundle|的标准插件语法: >
        Plugin 'xxx/yyy'
        Plugin 'aaa/bbb'
<
------------------------------------------------------------------------------
插件选项:~

由于插件选项较多, 因此只选择几个比较重要的选项进行说明, 如果想要进行更加
深入全面的配置, 请参考|coder-vimrc-plugins|。

                                                        |g:tagbar_ctags_bin|
此选项用来定位ctags可执行文件的位置, 默认搜索$PATH路径, 如果您的ctags不
位于其中, 请手动指明ctags可执行文件位置: >
    let g:tagbar_ctags_bin = 'C:\Ctags5.8\ctags.exe'
<
                                                             |g:ale_linters|
此选项用来指明默认开启的进行lint检测的语言选项, 默认开启对cpp和py的检测,
如果想要扩展请重定义或者追加此列表, 每增加一门新的检测语言, 请自行配置需
要的linter路径。对于支持的语言以及linter, 请参考|ale-support|: >
    let g:ale_linters = {
        \'cpp': ['cpplint'],
        \'python': ['pylint'],
        \}
<
                                              |g:ale_cpp_cpplint_executable|
此选项用于定位cpplint.py的位置, 默认搜索$PATH路径, 如果不存在其中, 请手动
指明cpplint的位置: >
    let g:ale_cpp_cpplint_executable = '~/myconfig/cpplint.py'
<
                                                 |g:ale_cpp_cpplint_options|
此选项用于设置cpplint检测代码时的选项, 请根据个人情况对其参数进行设置, 默
认为: >
    let g:ale_cpp_cpplint_options = '--verbose=5'
<
                                            |g:ale_python_pylint_executable|
此选项用于定位pylint的位置, 默认搜索$PATH路径, 如果不存在其中, 请手动指明
pylint的位置: >
    let g:ale_python_pylint_executable = '~/myconfig/pylint'
<
                                               |g:ale_python_pylint_options|
此选项用于设置pylint检测代码时的选项, 请根据个人情况对其参数进行设置, 默认
为: >
    let g:ale_python_pylint_options = '--rcfile  ~/.pylintrc'
<
==============================================================================
命令                                                   *coder-vimrc-commands*

命令和选项类似。第一部分是|cvimrc|本身的命令, 另一部分是集成的插件所支持的
命令。对于basic版来说, 插件的命令是无效的。如果想要拓展或是重定义这些命令,
请在~/.vimrc文件上进行扩展。

------------------------------------------------------------------------------
cvimrc命令:~

                                                                      *:Cwd*
:Cwd
    将当前工作目录切换为当前|buffers|所在目录

    例如用`:pwd`命令显示当前目录是~/a_dir, 而当前buffer目录为~/cur_buf, 那
    么当输入`:Cwd`时, 将会将当前工作目录设置为~/cur_buf。

                                                                   *:Search*
:Search {pattern}
    在当前工作目录下的所有子目录及其子文件中搜索所有符合pattern的文本, 并
    将结果重定向到|location-list|中(可以使用<F3>快速打开, 关闭)。

    pattern支持Vim的|regexp|, 按<TAB>会出现自动补全, 默认补全选项顺序为:
        1. 当前光标所在位置的字符串(|<cword>|里的内容)
        2. 上一次搜索命令的内容(寄存器@/: |quote/|里的内容)
        3. 粘贴板里的内容(寄存器@*: |gui-clipboard|里的内容)

    以下命令返回当前工作目录下所有后缀为cpp的文件: >
        :Search \v.*\.cpp
<
------------------------------------------------------------------------------
插件命令:~

这里只列出几个常用的命令, 如果想要深入了解请参考|coder-vimrc-plugins|。

                                                            `:PluginInstall`
:PluginInstall [plugin-name]
    安装插件到当前的Vim中, 如果不指定[plugin-name], 将会自动读取|cvimrc|里
    设置好的插件列表进行安装(推荐), 如果指定[plugin-name], 可以临时性的将
    此插件安装到Vim之中。

                                                             `:PluginUpdate`
:PluginUpdate[!]
    更新在Vundle插件配置列表的所有插件。

                                                              `:PluginClean`
:PluginClean[!]
    删除已安装但是不在Vundle插件配置列表里的插件。

                                                                 `:NERDTree`
:NERDTree [<start-directory> | <bookmark>]
    如无参数, 则默认打开当前工作目录的目录树, 否则打开指定目录或者书签。
==============================================================================
映射                                                   *coder-vimrc-mappings*

==============================================================================
插件                                                    *coder-vimrc-plugins*

==============================================================================
依赖                                               *coder-vimrc-requirements*

vim:tw=78:ts=4:ft=help:norl:
